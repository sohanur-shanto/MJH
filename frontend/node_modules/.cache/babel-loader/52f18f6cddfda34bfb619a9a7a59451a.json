{"ast":null,"code":"import WebMercatorViewport from './web-mercator-viewport';\nimport { mod, log2 } from './math-utils';\nvar MAX_LATITUDE = 85.05113;\nvar MIN_LATITUDE = -85.05113;\nexport default function normalizeViewportProps(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      longitude = _ref.longitude,\n      latitude = _ref.latitude,\n      zoom = _ref.zoom,\n      _ref$pitch = _ref.pitch,\n      pitch = _ref$pitch === void 0 ? 0 : _ref$pitch,\n      _ref$bearing = _ref.bearing,\n      bearing = _ref$bearing === void 0 ? 0 : _ref$bearing;\n\n  if (longitude < -180 || longitude > 180) {\n    longitude = mod(longitude + 180, 360) - 180;\n  }\n\n  if (bearing < -180 || bearing > 180) {\n    bearing = mod(bearing + 180, 360) - 180;\n  }\n\n  var flatViewport = new WebMercatorViewport({\n    width: width,\n    height: height,\n    longitude: longitude,\n    latitude: latitude,\n    zoom: zoom\n  });\n  var topY = flatViewport.project([longitude, MAX_LATITUDE])[1];\n  var bottomY = flatViewport.project([longitude, MIN_LATITUDE])[1];\n  var shiftY = 0;\n\n  if (bottomY - topY < height) {\n    zoom += log2(height / (bottomY - topY));\n    flatViewport = new WebMercatorViewport({\n      width: width,\n      height: height,\n      longitude: longitude,\n      latitude: latitude,\n      zoom: zoom\n    });\n    topY = flatViewport.project([longitude, MAX_LATITUDE])[1];\n    bottomY = flatViewport.project([longitude, MIN_LATITUDE])[1];\n  }\n\n  if (topY > 0) {\n    shiftY = topY;\n  } else if (bottomY < height) {\n    shiftY = bottomY - height;\n  }\n\n  if (shiftY) {\n    latitude = flatViewport.unproject([width / 2, height / 2 + shiftY])[1];\n  }\n\n  return {\n    width: width,\n    height: height,\n    longitude: longitude,\n    latitude: latitude,\n    zoom: zoom,\n    pitch: pitch,\n    bearing: bearing\n  };\n}","map":{"version":3,"sources":["../../src/normalize-viewport-props.js"],"names":["MAX_LATITUDE","MIN_LATITUDE","pitch","bearing","longitude","mod","flatViewport","width","height","latitude","zoom","topY","bottomY","shiftY","log2"],"mappings":"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","sourcesContent":["import WebMercatorViewport from './web-mercator-viewport';\nimport {mod, log2} from './math-utils';\n\n// defined by mapbox-gl\nconst MAX_LATITUDE = 85.05113;\nconst MIN_LATITUDE = -85.05113;\n\n// Apply mathematical constraints to viewport props\n// eslint-disable-next-line complexity\nexport default function normalizeViewportProps({\n  width,\n  height,\n  longitude,\n  latitude,\n  zoom,\n  pitch = 0,\n  bearing = 0\n}) {\n  // Normalize degrees\n  if (longitude < -180 || longitude > 180) {\n    longitude = mod(longitude + 180, 360) - 180;\n  }\n  if (bearing < -180 || bearing > 180) {\n    bearing = mod(bearing + 180, 360) - 180;\n  }\n\n  // Constrain zoom and shift center at low zoom levels\n  let flatViewport = new WebMercatorViewport({width, height, longitude, latitude, zoom});\n  let topY = flatViewport.project([longitude, MAX_LATITUDE])[1];\n  let bottomY = flatViewport.project([longitude, MIN_LATITUDE])[1];\n  let shiftY = 0;\n\n  if (bottomY - topY < height) {\n    // Map height must not be smaller than viewport height\n    // Zoom out map to fit map height into viewport\n    zoom += log2(height / (bottomY - topY));\n\n    // Calculate top and bottom using new zoom\n    flatViewport = new WebMercatorViewport({width, height, longitude, latitude, zoom});\n    topY = flatViewport.project([longitude, MAX_LATITUDE])[1];\n    bottomY = flatViewport.project([longitude, MIN_LATITUDE])[1];\n  }\n  if (topY > 0) {\n    // Compensate for white gap on top\n    shiftY = topY;\n  } else if (bottomY < height) {\n    // Compensate for white gap on bottom\n    shiftY = bottomY - height;\n  }\n  if (shiftY) {\n    latitude = flatViewport.unproject([width / 2, height / 2 + shiftY])[1];\n  }\n\n  return {width, height, longitude, latitude, zoom, pitch, bearing};\n}\n"]},"metadata":{},"sourceType":"module"}