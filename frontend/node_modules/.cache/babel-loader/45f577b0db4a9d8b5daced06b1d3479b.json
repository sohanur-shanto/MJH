{"ast":null,"code":"\"use strict\";\n\nvar errorObject_1 = require('./errorObject');\n\nvar tryCatchTarget;\n\nfunction tryCatcher() {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject_1.errorObject.e = e;\n    return errorObject_1.errorObject;\n  }\n}\n\nfunction tryCatch(fn) {\n  tryCatchTarget = fn;\n  return tryCatcher;\n}\n\nexports.tryCatch = tryCatch;\n;","map":{"version":3,"sources":["../../src/util/tryCatch.ts"],"names":[],"mappings":";;AAAA,IAAA,aAAA,GAAA,OAAA,CAA4B,eAA5B,CAAA;;AAEA,IAAI,cAAJ;;AAEA,SAAA,UAAA,GAAA;AACE,MAAI;AACF,WAAO,cAAc,CAAC,KAAf,CAAqB,IAArB,EAA2B,SAA3B,CAAP;AACA,GAFF,CAEE,OAAO,CAAP,EAAU;AACV,IAAA,aAAA,CAAA,WAAA,CAAY,CAAZ,GAAgB,CAAhB;AACA,WAAO,aAAA,CAAA,WAAP;AACD;AACF;;AAED,SAAA,QAAA,CAA6C,EAA7C,EAAkD;AAChD,EAAA,cAAc,GAAG,EAAjB;AACA,SAAY,UAAZ;AACD;;AAHe,OAAA,CAAA,QAAA,GAAQ,QAAR;AAGf","sourcesContent":["import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}