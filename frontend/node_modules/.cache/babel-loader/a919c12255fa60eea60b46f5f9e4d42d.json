{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar isFunction_1 = require('./util/isFunction');\n\nvar Subscription_1 = require('./Subscription');\n\nvar Observer_1 = require('./Observer');\n\nvar rxSubscriber_1 = require('./symbol/rxSubscriber');\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\n\n\nvar Subscriber = function (_super) {\n  __extends(Subscriber, _super);\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n\n\n  function Subscriber(destinationOrNext, error, complete) {\n    _super.call(this);\n\n    this.syncErrorValue = null;\n    this.syncErrorThrown = false;\n    this.syncErrorThrowable = false;\n    this.isStopped = false;\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = Observer_1.empty;\n        break;\n\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = Observer_1.empty;\n          break;\n        }\n\n        if (typeof destinationOrNext === 'object') {\n          // HACK(benlesh): To resolve an issue where Node users may have multiple\n          // copies of rxjs in their node_modules directory.\n          if (isTrustedSubscriber(destinationOrNext)) {\n            var trustedSubscriber = destinationOrNext[rxSubscriber_1.rxSubscriber]();\n            this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;\n            this.destination = trustedSubscriber;\n            trustedSubscriber.add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber(this, destinationOrNext);\n          }\n\n          break;\n        }\n\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  Subscriber.prototype[rxSubscriber_1.rxSubscriber] = function () {\n    return this;\n  };\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n\n\n  Subscriber.create = function (next, error, complete) {\n    var subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  };\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n\n\n  Subscriber.prototype.next = function (value) {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  };\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n\n\n  Subscriber.prototype.error = function (err) {\n    if (!this.isStopped) {\n      this.isStopped = true;\n\n      this._error(err);\n    }\n  };\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n\n\n  Subscriber.prototype.complete = function () {\n    if (!this.isStopped) {\n      this.isStopped = true;\n\n      this._complete();\n    }\n  };\n\n  Subscriber.prototype.unsubscribe = function () {\n    if (this.closed) {\n      return;\n    }\n\n    this.isStopped = true;\n\n    _super.prototype.unsubscribe.call(this);\n  };\n\n  Subscriber.prototype._next = function (value) {\n    this.destination.next(value);\n  };\n\n  Subscriber.prototype._error = function (err) {\n    this.destination.error(err);\n    this.unsubscribe();\n  };\n\n  Subscriber.prototype._complete = function () {\n    this.destination.complete();\n    this.unsubscribe();\n  };\n  /** @deprecated internal use only */\n\n\n  Subscriber.prototype._unsubscribeAndRecycle = function () {\n    var _a = this,\n        _parent = _a._parent,\n        _parents = _a._parents;\n\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  };\n\n  return Subscriber;\n}(Subscription_1.Subscription);\n\nexports.Subscriber = Subscriber;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\nvar SafeSubscriber = function (_super) {\n  __extends(SafeSubscriber, _super);\n\n  function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n    _super.call(this);\n\n    this._parentSubscriber = _parentSubscriber;\n    var next;\n    var context = this;\n\n    if (isFunction_1.isFunction(observerOrNext)) {\n      next = observerOrNext;\n    } else if (observerOrNext) {\n      next = observerOrNext.next;\n      error = observerOrNext.error;\n      complete = observerOrNext.complete;\n\n      if (observerOrNext !== Observer_1.empty) {\n        context = Object.create(observerOrNext);\n\n        if (isFunction_1.isFunction(context.unsubscribe)) {\n          this.add(context.unsubscribe.bind(context));\n        }\n\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  SafeSubscriber.prototype.next = function (value) {\n    if (!this.isStopped && this._next) {\n      var _parentSubscriber = this._parentSubscriber;\n\n      if (!_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  };\n\n  SafeSubscriber.prototype.error = function (err) {\n    if (!this.isStopped) {\n      var _parentSubscriber = this._parentSubscriber;\n\n      if (this._error) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parentSubscriber.syncErrorValue = err;\n        _parentSubscriber.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  };\n\n  SafeSubscriber.prototype.complete = function () {\n    var _this = this;\n\n    if (!this.isStopped) {\n      var _parentSubscriber = this._parentSubscriber;\n\n      if (this._complete) {\n        var wrappedComplete = function () {\n          return _this._complete.call(_this._context);\n        };\n\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  };\n\n  SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  };\n\n  SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n\n    return false;\n  };\n  /** @deprecated internal use only */\n\n\n  SafeSubscriber.prototype._unsubscribe = function () {\n    var _parentSubscriber = this._parentSubscriber;\n    this._context = null;\n    this._parentSubscriber = null;\n\n    _parentSubscriber.unsubscribe();\n  };\n\n  return SafeSubscriber;\n}(Subscriber);\n\nfunction isTrustedSubscriber(obj) {\n  return obj instanceof Subscriber || 'syncErrorThrowable' in obj && obj[rxSubscriber_1.rxSubscriber];\n}","map":{"version":3,"sources":["../src/Subscriber.ts"],"names":[],"mappings":"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","sourcesContent":["import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          // HACK(benlesh): To resolve an issue where Node users may have multiple\n          // copies of rxjs in their node_modules directory.\n          if (isTrustedSubscriber(destinationOrNext)) {\n            const trustedSubscriber = destinationOrNext[rxSubscriberSymbol]() as Subscriber<any>;\n            this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;\n            this.destination = trustedSubscriber;\n            trustedSubscriber.add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  /** @deprecated internal use only */ _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._error) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parentSubscriber.syncErrorValue = err;\n        _parentSubscriber.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  /** @deprecated internal use only */ _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n\nfunction isTrustedSubscriber(obj: any) {\n  return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriberSymbol]);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}