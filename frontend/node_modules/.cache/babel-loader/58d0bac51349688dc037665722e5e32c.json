{"ast":null,"code":"\"use strict\";\n\nvar Subscriber_1 = require('../Subscriber');\n\nvar rxSubscriber_1 = require('../symbol/rxSubscriber');\n\nvar Observer_1 = require('../Observer');\n\nfunction toSubscriber(nextOrObserver, error, complete) {\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber_1.Subscriber) {\n      return nextOrObserver;\n    }\n\n    if (nextOrObserver[rxSubscriber_1.rxSubscriber]) {\n      return nextOrObserver[rxSubscriber_1.rxSubscriber]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber_1.Subscriber(Observer_1.empty);\n  }\n\n  return new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n}\n\nexports.toSubscriber = toSubscriber;","map":{"version":3,"sources":["../../src/util/toSubscriber.ts"],"names":[],"mappings":";;AAAA,IAAA,YAAA,GAAA,OAAA,CAA2B,eAA3B,CAAA;;AACA,IAAA,cAAA,GAAA,OAAA,CAAmD,wBAAnD,CAAA;;AACA,IAAA,UAAA,GAAA,OAAA,CAAwD,aAAxD,CAAA;;AAEA,SAAA,YAAA,CACE,cADF,EAEE,KAFF,EAGE,QAHF,EAGuB;AAErB,MAAI,cAAJ,EAAoB;AAClB,QAAI,cAAc,YAAY,YAAA,CAAA,UAA9B,EAA0C;AACxC,aAAwB,cAAxB;AACD;;AAED,QAAI,cAAc,CAAC,cAAA,CAAA,YAAD,CAAlB,EAAwC;AACtC,aAAO,cAAc,CAAC,cAAA,CAAA,YAAD,CAAd,EAAP;AACD;AACF;;AAED,MAAI,CAAC,cAAD,IAAmB,CAAC,KAApB,IAA6B,CAAC,QAAlC,EAA4C;AAC1C,WAAO,IAAI,YAAA,CAAA,UAAJ,CAAe,UAAA,CAAA,KAAf,CAAP;AACD;;AAED,SAAO,IAAI,YAAA,CAAA,UAAJ,CAAe,cAAf,EAA+B,KAA/B,EAAsC,QAAtC,CAAP;AACD;;AApBe,OAAA,CAAA,YAAA,GAAY,YAAZ","sourcesContent":["import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { PartialObserver, empty as emptyObserver } from '../Observer';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}