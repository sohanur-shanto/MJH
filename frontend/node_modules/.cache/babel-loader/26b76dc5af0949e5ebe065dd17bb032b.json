{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Observable_1 = require('../Observable');\n\nvar tryCatch_1 = require('../util/tryCatch');\n\nvar isFunction_1 = require('../util/isFunction');\n\nvar errorObject_1 = require('../util/errorObject');\n\nvar Subscription_1 = require('../Subscription');\n\nvar toString = Object.prototype.toString;\n\nfunction isNodeStyleEventEmitter(sourceObj) {\n  return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\n\nfunction isJQueryStyleEventEmitter(sourceObj) {\n  return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\n\nfunction isNodeList(sourceObj) {\n  return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';\n}\n\nfunction isHTMLCollection(sourceObj) {\n  return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';\n}\n\nfunction isEventTarget(sourceObj) {\n  return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\n\n\nvar FromEventObservable = function (_super) {\n  __extends(FromEventObservable, _super);\n\n  function FromEventObservable(sourceObj, eventName, selector, options) {\n    _super.call(this);\n\n    this.sourceObj = sourceObj;\n    this.eventName = eventName;\n    this.selector = selector;\n    this.options = options;\n  }\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Creates an Observable that emits events of a specific type coming from the\n   * given event target.\n   *\n   * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n   * EventEmitter events or others.</span>\n   *\n   * <img src=\"./img/fromEvent.png\" width=\"100%\">\n   *\n   * `fromEvent` accepts as a first argument event target, which is an object with methods\n   * for registering event handler functions. As a second argument it takes string that indicates\n   * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n   * which are described in detail below. If your event target does not match any of the ones listed,\n   * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n   * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n   * handler functions have different names, but they all accept a string describing event type\n   * and function itself, which will be called whenever said event happens.\n   *\n   * Every time resulting Observable is subscribed, event handler function will be registered\n   * to event target on given event type. When that event fires, value\n   * passed as a first argument to registered function will be emitted by output Observable.\n   * When Observable is unsubscribed, function will be unregistered from event target.\n   *\n   * Note that if event target calls registered function with more than one argument, second\n   * and following arguments will not appear in resulting stream. In order to get access to them,\n   * you can pass to `fromEvent` optional project function, which will be called with all arguments\n   * passed to event handler. Output Observable will then emit value returned by project function,\n   * instead of the usual value.\n   *\n   * Remember that event targets listed below are checked via duck typing. It means that\n   * no matter what kind of object you have and no matter what environment you work in,\n   * you can safely use `fromEvent` on that object if it exposes described methods (provided\n   * of course they behave as was described above). So for example if Node.js library exposes\n   * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n   * a good choice.\n   *\n   * If the API you use is more callback then event handler oriented (subscribed\n   * callback function fires only once and thus there is no need to manually\n   * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n   * instead.\n   *\n   * `fromEvent` supports following types of event targets:\n   *\n   * **DOM EventTarget**\n   *\n   * This is an object with `addEventListener` and `removeEventListener` methods.\n   *\n   * In the browser, `addEventListener` accepts - apart from event type string and event\n   * handler function arguments - optional third parameter, which is either an object or boolean,\n   * both used for additional configuration how and when passed function will be called. When\n   * `fromEvent` is used with event target of that type, you can provide this values\n   * as third parameter as well.\n   *\n   * **Node.js EventEmitter**\n   *\n   * An object with `addListener` and `removeListener` methods.\n   *\n   * **JQuery-style event target**\n   *\n   * An object with `on` and `off` methods\n   *\n   * **DOM NodeList**\n   *\n   * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n   *\n   * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n   * it contains and install event handler function in every of them. When returned Observable\n   * is unsubscribed, function will be removed from all Nodes.\n   *\n   * **DOM HtmlCollection**\n   *\n   * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n   * installed and removed in each of elements.\n   *\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * var clicks = Rx.Observable.fromEvent(document, 'click');\n   * clicks.subscribe(x => console.log(x));\n   *\n   * // Results in:\n   * // MouseEvent object logged to console every time a click\n   * // occurs on the document.\n   *\n   *\n   * @example <caption>Use addEventListener with capture option</caption>\n   * var clicksInDocument = Rx.Observable.fromEvent(document, 'click', true); // note optional configuration parameter\n   *                                                                          // which will be passed to addEventListener\n   * var clicksInDiv = Rx.Observable.fromEvent(someDivInDocument, 'click');\n   *\n   * clicksInDocument.subscribe(() => console.log('document'));\n   * clicksInDiv.subscribe(() => console.log('div'));\n   *\n   * // By default events bubble UP in DOM tree, so normally\n   * // when we would click on div in document\n   * // \"div\" would be logged first and then \"document\".\n   * // Since we specified optional `capture` option, document\n   * // will catch event when it goes DOWN DOM tree, so console\n   * // will log \"document\" and then \"div\".\n   *\n   * @see {@link bindCallback}\n   * @see {@link bindNodeCallback}\n   * @see {@link fromEventPattern}\n   *\n   * @param {EventTargetLike} target The DOM EventTarget, Node.js\n   * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n   * @param {string} eventName The event name of interest, being emitted by the\n   * `target`.\n   * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n   * @param {SelectorMethodSignature<T>} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEvent\n   * @owner Observable\n   */\n\n\n  FromEventObservable.create = function (target, eventName, options, selector) {\n    if (isFunction_1.isFunction(options)) {\n      selector = options;\n      options = undefined;\n    }\n\n    return new FromEventObservable(target, eventName, selector, options);\n  };\n\n  FromEventObservable.setupSubscription = function (sourceObj, eventName, handler, subscriber, options) {\n    var unsubscribe;\n\n    if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n      for (var i = 0, len = sourceObj.length; i < len; i++) {\n        FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n      }\n    } else if (isEventTarget(sourceObj)) {\n      var source_1 = sourceObj;\n      sourceObj.addEventListener(eventName, handler, options);\n\n      unsubscribe = function () {\n        return source_1.removeEventListener(eventName, handler, options);\n      };\n    } else if (isJQueryStyleEventEmitter(sourceObj)) {\n      var source_2 = sourceObj;\n      sourceObj.on(eventName, handler);\n\n      unsubscribe = function () {\n        return source_2.off(eventName, handler);\n      };\n    } else if (isNodeStyleEventEmitter(sourceObj)) {\n      var source_3 = sourceObj;\n      sourceObj.addListener(eventName, handler);\n\n      unsubscribe = function () {\n        return source_3.removeListener(eventName, handler);\n      };\n    } else {\n      throw new TypeError('Invalid event target');\n    }\n\n    subscriber.add(new Subscription_1.Subscription(unsubscribe));\n  };\n  /** @deprecated internal use only */\n\n\n  FromEventObservable.prototype._subscribe = function (subscriber) {\n    var sourceObj = this.sourceObj;\n    var eventName = this.eventName;\n    var options = this.options;\n    var selector = this.selector;\n    var handler = selector ? function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i - 0] = arguments[_i];\n      }\n\n      var result = tryCatch_1.tryCatch(selector).apply(void 0, args);\n\n      if (result === errorObject_1.errorObject) {\n        subscriber.error(errorObject_1.errorObject.e);\n      } else {\n        subscriber.next(result);\n      }\n    } : function (e) {\n      return subscriber.next(e);\n    };\n    FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n  };\n\n  return FromEventObservable;\n}(Observable_1.Observable);\n\nexports.FromEventObservable = FromEventObservable;","map":{"version":3,"sources":["../../src/observable/FromEventObservable.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable } from '../Observable';\nimport { tryCatch } from '../util/tryCatch';\nimport { isFunction } from '../util/isFunction';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nconst toString: Function = Object.prototype.toString;\n\nexport type NodeStyleEventEmitter = {\n  addListener: (eventName: string, handler: NodeEventHandler) => void;\n  removeListener: (eventName: string, handler: NodeEventHandler) => void;\n};\n\nexport type NodeEventHandler = (...args: any[]) => void;\n\nfunction isNodeStyleEventEmitter(sourceObj: any): sourceObj is NodeStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\n\nexport type JQueryStyleEventEmitter = {\n  on: (eventName: string, handler: Function) => void;\n  off: (eventName: string, handler: Function) => void;\n};\nfunction isJQueryStyleEventEmitter(sourceObj: any): sourceObj is JQueryStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\n\nfunction isNodeList(sourceObj: any): sourceObj is NodeList {\n  return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';\n}\n\nfunction isHTMLCollection(sourceObj: any): sourceObj is HTMLCollection {\n  return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';\n}\n\nfunction isEventTarget(sourceObj: any): sourceObj is EventTarget {\n  return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n\nexport type EventTargetLike = EventTarget | NodeStyleEventEmitter | JQueryStyleEventEmitter | NodeList | HTMLCollection;\n\nexport type EventListenerOptions = {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n} | boolean;\n\nexport type SelectorMethodSignature<T> = (...args: Array<any>) => T;\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventObservable<T> extends Observable<T> {\n\n  /* tslint:disable:max-line-length */\n  static create<T>(target: EventTargetLike, eventName: string): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, selector: SelectorMethodSignature<T>): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions, selector: SelectorMethodSignature<T>): Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Creates an Observable that emits events of a specific type coming from the\n   * given event target.\n   *\n   * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n   * EventEmitter events or others.</span>\n   *\n   * <img src=\"./img/fromEvent.png\" width=\"100%\">\n   *\n   * `fromEvent` accepts as a first argument event target, which is an object with methods\n   * for registering event handler functions. As a second argument it takes string that indicates\n   * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n   * which are described in detail below. If your event target does not match any of the ones listed,\n   * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n   * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n   * handler functions have different names, but they all accept a string describing event type\n   * and function itself, which will be called whenever said event happens.\n   *\n   * Every time resulting Observable is subscribed, event handler function will be registered\n   * to event target on given event type. When that event fires, value\n   * passed as a first argument to registered function will be emitted by output Observable.\n   * When Observable is unsubscribed, function will be unregistered from event target.\n   *\n   * Note that if event target calls registered function with more than one argument, second\n   * and following arguments will not appear in resulting stream. In order to get access to them,\n   * you can pass to `fromEvent` optional project function, which will be called with all arguments\n   * passed to event handler. Output Observable will then emit value returned by project function,\n   * instead of the usual value.\n   *\n   * Remember that event targets listed below are checked via duck typing. It means that\n   * no matter what kind of object you have and no matter what environment you work in,\n   * you can safely use `fromEvent` on that object if it exposes described methods (provided\n   * of course they behave as was described above). So for example if Node.js library exposes\n   * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n   * a good choice.\n   *\n   * If the API you use is more callback then event handler oriented (subscribed\n   * callback function fires only once and thus there is no need to manually\n   * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n   * instead.\n   *\n   * `fromEvent` supports following types of event targets:\n   *\n   * **DOM EventTarget**\n   *\n   * This is an object with `addEventListener` and `removeEventListener` methods.\n   *\n   * In the browser, `addEventListener` accepts - apart from event type string and event\n   * handler function arguments - optional third parameter, which is either an object or boolean,\n   * both used for additional configuration how and when passed function will be called. When\n   * `fromEvent` is used with event target of that type, you can provide this values\n   * as third parameter as well.\n   *\n   * **Node.js EventEmitter**\n   *\n   * An object with `addListener` and `removeListener` methods.\n   *\n   * **JQuery-style event target**\n   *\n   * An object with `on` and `off` methods\n   *\n   * **DOM NodeList**\n   *\n   * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n   *\n   * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n   * it contains and install event handler function in every of them. When returned Observable\n   * is unsubscribed, function will be removed from all Nodes.\n   *\n   * **DOM HtmlCollection**\n   *\n   * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n   * installed and removed in each of elements.\n   *\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * var clicks = Rx.Observable.fromEvent(document, 'click');\n   * clicks.subscribe(x => console.log(x));\n   *\n   * // Results in:\n   * // MouseEvent object logged to console every time a click\n   * // occurs on the document.\n   *\n   *\n   * @example <caption>Use addEventListener with capture option</caption>\n   * var clicksInDocument = Rx.Observable.fromEvent(document, 'click', true); // note optional configuration parameter\n   *                                                                          // which will be passed to addEventListener\n   * var clicksInDiv = Rx.Observable.fromEvent(someDivInDocument, 'click');\n   *\n   * clicksInDocument.subscribe(() => console.log('document'));\n   * clicksInDiv.subscribe(() => console.log('div'));\n   *\n   * // By default events bubble UP in DOM tree, so normally\n   * // when we would click on div in document\n   * // \"div\" would be logged first and then \"document\".\n   * // Since we specified optional `capture` option, document\n   * // will catch event when it goes DOWN DOM tree, so console\n   * // will log \"document\" and then \"div\".\n   *\n   * @see {@link bindCallback}\n   * @see {@link bindNodeCallback}\n   * @see {@link fromEventPattern}\n   *\n   * @param {EventTargetLike} target The DOM EventTarget, Node.js\n   * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n   * @param {string} eventName The event name of interest, being emitted by the\n   * `target`.\n   * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n   * @param {SelectorMethodSignature<T>} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEvent\n   * @owner Observable\n   */\n  static create<T>(target: EventTargetLike,\n                   eventName: string,\n                   options?: EventListenerOptions | SelectorMethodSignature<T>,\n                   selector?: SelectorMethodSignature<T>): Observable<T> {\n    if (isFunction(options)) {\n      selector = <any>options;\n      options = undefined;\n    }\n    return new FromEventObservable(target, eventName, selector, options as EventListenerOptions | undefined);\n  }\n\n  constructor(private sourceObj: EventTargetLike,\n              private eventName: string,\n              private selector?: SelectorMethodSignature<T>,\n              private options?: EventListenerOptions) {\n    super();\n  }\n\n  private static setupSubscription<T>(sourceObj: EventTargetLike,\n                                      eventName: string,\n                                      handler: Function,\n                                      subscriber: Subscriber<T>,\n                                      options?: EventListenerOptions) {\n    let unsubscribe: () => void;\n    if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n      for (let i = 0, len = sourceObj.length; i < len; i++) {\n        FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n      }\n    } else if (isEventTarget(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addEventListener(eventName, <EventListener>handler, <boolean>options);\n      unsubscribe = () => source.removeEventListener(eventName, <EventListener>handler, <boolean>options);\n    } else if (isJQueryStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.on(eventName, handler);\n      unsubscribe = () => source.off(eventName, handler);\n    } else if (isNodeStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addListener(eventName, handler as NodeEventHandler);\n      unsubscribe = () => source.removeListener(eventName, handler as NodeEventHandler);\n    } else {\n      throw new TypeError('Invalid event target');\n    }\n\n    subscriber.add(new Subscription(unsubscribe));\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>) {\n    const sourceObj = this.sourceObj;\n    const eventName = this.eventName;\n    const options = this.options;\n    const selector = this.selector;\n    let handler = selector ? (...args: any[]) => {\n      let result = tryCatch(selector)(...args);\n      if (result === errorObject) {\n        subscriber.error(errorObject.e);\n      } else {\n        subscriber.next(result);\n      }\n    } : (e: any) => subscriber.next(e);\n\n    FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}